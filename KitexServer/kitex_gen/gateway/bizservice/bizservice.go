// Code generated by Kitex v0.8.0. DO NOT EDIT.

package bizservice

import (
	"context"
	gateway "gateway/kitex_gen/gateway"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return bizServiceServiceInfo
}

var bizServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "BizService"
	handlerType := (*gateway.BizService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Register": kitex.NewMethodInfo(registerHandler, newBizServiceRegisterArgs, newBizServiceRegisterResult, false),
		"Query":    kitex.NewMethodInfo(queryHandler, newBizServiceQueryArgs, newBizServiceQueryResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "gateway",
		"ServiceFilePath": `idl/student.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*gateway.BizServiceRegisterArgs)
	realResult := result.(*gateway.BizServiceRegisterResult)
	success, err := handler.(gateway.BizService).Register(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBizServiceRegisterArgs() interface{} {
	return gateway.NewBizServiceRegisterArgs()
}

func newBizServiceRegisterResult() interface{} {
	return gateway.NewBizServiceRegisterResult()
}

func queryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*gateway.BizServiceQueryArgs)
	realResult := result.(*gateway.BizServiceQueryResult)
	success, err := handler.(gateway.BizService).Query(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBizServiceQueryArgs() interface{} {
	return gateway.NewBizServiceQueryArgs()
}

func newBizServiceQueryResult() interface{} {
	return gateway.NewBizServiceQueryResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, req *gateway.BizRequest) (r *gateway.BizResponse, err error) {
	var _args gateway.BizServiceRegisterArgs
	_args.Req = req
	var _result gateway.BizServiceRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Query(ctx context.Context, req *gateway.BizRequest) (r *gateway.BizResponse, err error) {
	var _args gateway.BizServiceQueryArgs
	_args.Req = req
	var _result gateway.BizServiceQueryResult
	if err = p.c.Call(ctx, "Query", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
