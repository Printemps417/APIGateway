// Code generated by hertz generator.

package gateway

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/generic"
	etcd "github.com/kitex-contrib/registry-etcd"
	"log"
	"net/http"

	gateway "gateway/biz/model/gateway"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

func genericCall(ctx context.Context, c *app.RequestContext, req gateway.BizRequest, httpMethod string) {
	path := "./idl/student.thrift"
	service := c.Param("service")
	method := c.Param("method")
	p, err := generic.NewThriftFileProvider(path)
	if err != nil {
		hlog.Fatalf("new thrift file provider failed: %v", err)
	}
	g, err := generic.HTTPThriftGeneric(p)
	if err != nil {
		hlog.Fatalf("new http thrift generic failed: %v", err)
	}
	resolver, err := etcd.NewEtcdResolver([]string{"127.0.0.1:2379"})
	cli, err := genericclient.NewClient(service, g, client.WithResolver(resolver))
	if err != nil {
		hlog.Fatalf("new http generic client failed: %v", err)
	}

	jsonData, err := json.Marshal(req)
	if err != nil {
		fmt.Println("JSON encoding error:", err)
		return
	}
	byteData := []byte(jsonData)
	httpReq, err := http.NewRequest(httpMethod, "", bytes.NewBuffer(byteData))
	httpReq.URL.Path = fmt.Sprintf("/RPC/%s/%s", service, method)

	genericReq, err := generic.FromHTTPRequest(httpReq)

	genericResp, err := cli.GenericCall(ctx, "", genericReq)
	if err != nil {
		hlog.Fatalf("generic call failed: %v", err)
	}
	log.Print(genericResp)
	resp, ok := genericResp.(*generic.HTTPResponse)
	if !ok {
		hlog.Fatalf("generic call response failed: %v", genericResp)
		c.JSON(http.StatusOK, errors.New("resp translate error"))
	}
	c.JSON(http.StatusOK, resp.Body)
}

// Register .
// @router /RPC/:service/:method [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var req gateway.BizRequest
	err := c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	genericCall(ctx, c, req, http.MethodPost)
}

// Query .
// @router /RPC/:service/:method [GET]
func Query(ctx context.Context, c *app.RequestContext) {
	var req gateway.BizRequest
	err := c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	genericCall(ctx, c, req, http.MethodGet)
}
